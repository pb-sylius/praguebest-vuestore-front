@use 'sass:math';
@use "sass:meta";
@use "sass:string";

$mobile-max: 767px;
$tablet-min: 768px;
$tablet-max: 1023px;
$desktop-min: 1024px;
$desktop-l-min: 1200px;
$desktop-xl-min: 1440px;
$desktop-xxl-min: 1920px;

$breakpoint-3xs: 320px;
$breakpoint-2xs: 420px;
$breakpoint-xs: 768px;
$breakpoint-sm: 1024px;
$breakpoint-md: 1376px;
$breakpoint-lg: 1632px;
$breakpoint-2lg: 1920px;
$breakpoint-3lg: 2560px;

//max page width
$outer-edges: 2560px;

//max content width
$inner-content-edges: 1400px;

//will be replaced
$generic-breakpoint: 800px;

//min value for fluid calculations
$min-calc-width: 320px;

// Media mixins
@mixin for-mobile {
  @media (max-width: $desktop-min - 1px) {
    @content;
  }
}
@mixin for-desktop {
  @media (min-width: $desktop-min) {
    @content;
  }
}

@mixin breakpoint-3xs {
  @media (max-width: $breakpoint-3xs) {
    @content;
  }
}

@mixin breakpoint-2xs {
  @media (max-width: $breakpoint-2xs) {
    @content;
  }
}

@mixin breakpoint-xs {
  @media (max-width: $breakpoint-xs) {
    @content;
  }
}

@mixin breakpoint-sm {
  @media (max-width: $breakpoint-sm) {
    @content;
  }
}

@mixin breakpoint-md {
  @media (max-width: $breakpoint-md) {
    @content;
  }
}

@mixin breakpoint-lg {
  @media (max-width: $breakpoint-lg) {
    @content;
  }
}

@mixin breakpoint-2lg {
  @media (max-width: $breakpoint-2lg) {
    @content;
  }
}

@mixin breakpoint-3lg {
  @media (max-width: $breakpoint-3lg) {
    @content;
  }
}

@mixin generic-breakpoint {
  @media (min-width: $generic-breakpoint) {
    @content;
  }
}

@mixin outer-edges {
  @media (max-width: $outer-edges) {
    @content;
  }
}

@function strip($value) {
  @if meta.type-of($value) != "number" {
      @error "Invalid `#{meta.type-of($value)}` type. Use a number type instead.";
  } @else if meta.type-of($value) == "number" and not math.is-unitless($value) {
      @return math.div($value, ($value * 0 + 1));
  }

  @return $value;
}