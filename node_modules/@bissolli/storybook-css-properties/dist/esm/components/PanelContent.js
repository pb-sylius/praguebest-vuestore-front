function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import React, { useEffect, useState } from "react";
import { ArgsTable } from "@storybook/components";
import { useDebounce } from "../use-debounce";
import { getIframeRoot, tableArgsBuilder } from "../utils";
export var PanelContent = function PanelContent(_ref) {
  var baseProperties = _ref.baseProperties,
      propsConfig = _ref.propsConfig,
      matchCategory = _ref.matchCategory,
      hiddenProps = _ref.hiddenProps;

  var properties = _toConsumableArray(baseProperties);

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      key = _useState2[0],
      setKey = _useState2[1];

  var _useState3 = useState(''),
      _useState4 = _slicedToArray(_useState3, 2),
      value = _useState4[0],
      setValue = _useState4[1];

  var debouncedValue = useDebounce(value, 100);

  var changeHanlder = function changeHanlder(value, key) {
    properties.map(function (obj) {
      if (obj.key === key) {
        obj.value = value;
      }

      return obj;
    });
    setValue(value);
    setKey(key);
  };

  useEffect(function () {
    if (value === '') return;
    var root = getIframeRoot();
    root.style.setProperty(key, value);
    changeHanlder('', '');
  }, [debouncedValue]);
  var tableArgs = tableArgsBuilder(baseProperties, propsConfig, hiddenProps, matchCategory);

  var _resetArgs = function resetArgs() {
    window.location.reload();
  };

  return /*#__PURE__*/React.createElement(ArgsTable, {
    inAddonPanel: true,
    resetArgs: function resetArgs() {
      return _resetArgs();
    },
    rows: tableArgs,
    updateArgs: function updateArgs(a) {
      Object.keys(a).forEach(function (key) {
        return changeHanlder(a[key], key);
      });
    }
  });
};